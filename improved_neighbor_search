CellLink class has been split into CellLink and CellSelfLink classes with common stuff taken into their parent abstract class AbstractCellLink. The CellSelfLink is only for loop links with first and second cells the same. BoundaryCell child of Cell has been introduced for Cells which are at the edge of region (layer of thickness of 1 Cell for >=cutoff cell width case and thickness of 2 Cells for >=0.5cutoff case). A ManagerCell2x class has been introduced as a child of ManagerCell with the changes required to implement the >=0.5cutoff case. const int[26][3] c_offsets array has been renamed to c_direct_offset and contains integer offset for all the direct neighbors of a cell, it is a stencil. const int[124][3] c_2x_offsets has been created and contains an index of the particular neighbor in c_direct_offset table (or -1, if it is a second level neighbor) and integer offsets for both direct and second level neighbors of a cell for >=0.5cutoff case. Which one to use is chosen by ManagerCell/ManagerCell2x polymorphism. const int[124][2] InterMap contains the index arrays for each second level neighbors consisting of two indices of first level neighbors in sequence how to reach the particular second level neighbor for calculating the cell distances. const int[124-26] c_indirect_neighbors contains the indices of second level neighbors in c_2x_offsets and interMap. const int[26] c_2x_direct_neighbors contains the opposite, i.e. indices of first-level neighbors in c_2x_offsets and interMap. These are necessary, since only first-level neighbors can be outlets and conversion is necessary from indices in arrays of first- and second-level neighbors to/from indices in arrays of only first-level neighbors. 

ManagerCell::connect method for connecting two regions together cellwise has been split into two, ManagerCell::connectPlanePair and ManagerCell::connect, the former contains code for connecting a pair of cell faces in two regions and the latter handles the >=cutoff and >=0.5cutoff cases, the latter of which became more complex due to more plane pairs requiring connection.

Two template options have been introduced for certain classes/methods, AddPairCheck_x and FarNeighborCheck_x. The former performs a check for shortest distance between particles via periodic dimensions in which there is only one cell present in the region. This is done in AddPair by passing a struct as template parameter ("AddPairCheck_OneCellDims") which contains the function "check". When the check is not necessary (in case of all dimensions have more than one cell in a region), a struct containing an empty function is passed to AddPair and the call to this function is optimized out by compiler, since it is empty and the decision is template based, thus decided at compile-time. FarNeighborCheck_x in the same fashion is used for enabling distance calculation between current particle and the whole cell, from which the second particle will be chosen to make pair. If the nearest distance to the cell is larger than cutoff, then the distance to all the particles in that cell will be larger than cutoff and it is not necessary to go through them one-by-one. 
